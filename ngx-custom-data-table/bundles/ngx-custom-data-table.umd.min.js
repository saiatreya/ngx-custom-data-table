!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("primeng/radiobutton"),require("primeng/table"),require("primeng/dropdown"),require("primeng/checkbox"),require("primeng/multiselect"),require("@angular/common"),require("@angular/forms"),require("primeng/tooltip"),require("primeng/button")):"function"==typeof define&&define.amd?define("ngx-custom-data-table",["exports","@angular/core","primeng/radiobutton","primeng/table","primeng/dropdown","primeng/checkbox","primeng/multiselect","@angular/common","@angular/forms","primeng/tooltip","primeng/button"],t):t((e=e||self)["ngx-custom-data-table"]={},e.ng.core,e.radiobutton,e.table,e.dropdown,e.checkbox,e.multiselect,e.ng.common,e.ng.forms,e.tooltip,e.button)}(this,(function(e,t,n,o,i,r,s,l,a,p,d){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */var u=function(){return(u=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function c(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var o,i,r=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(o=r.next()).done;)s.push(o.value)}catch(e){i={error:e}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(i)throw i.error}}return s}function m(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(c(arguments[t]));return e}var h=function(){function e(){this.radioSelectedValue="",this.uniqKey="",this.autoGenerateId=!1,this.keyOptional=!1,this.showRadioInRows=!1,this.showCheckBox=!1,this.noActions=!1,this.enableSelection=!1,this.onlyDelete=!1,this.sortOrder=1,this.sortKey=this.uniqKey,this.hideHeaderCheckBox=!1,this.btnContents={},this.noHeaderDropdown=!1,this.selectedValueEmit=new t.EventEmitter,this.confirmAdd=new t.EventEmitter,this.confirmUpdate=new t.EventEmitter,this.selectedLinkEmit=new t.EventEmitter,this.confirmDelete=new t.EventEmitter,this.closeDialog=new t.EventEmitter,this.saveChoosenValues=new t.EventEmitter,this.selectInfoEmit=new t.EventEmitter,this.rowObj={},this.editItems=[],this.clonedItems={},this.items=[],this.itemObj=[],this.rowInx="",this.addNewItems=[],this.newItem="",this.choosenItems=[],this.profilesList=[]}return Object.defineProperty(e.prototype,"selectionChange",{set:function(e){var t=this;this.items=m(this.items.filter((function(e){return e[t.uniqKey]}))),this.addNewItems=[],this.editCancel()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"tableList",{set:function(e){var t=this;if(this.rowInx&&(this.editCancel(),this.rowInx=""),this.newItem){var n=this.addNewItems.findIndex((function(e){return e[t.uniqKey]===t.newItem})),o=this.items.findIndex((function(e){return e[t.uniqKey]===t.newItem}));delete this.items[o].tempId,this.addNewItems.splice(n,1),this.newItem=""}e&&(this.items=m(this.addNewItems,e),this.choosenItems=this.items.filter((function(e){return e.chosen})))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"tableKeysList",{set:function(e){this.itemObj=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"tableProfileList",{set:function(e){this.profilesList=e},enumerable:!0,configurable:!0}),e.prototype.ngOnInit=function(){var e=this;this.sortKey=this.sortKey||this.uniqKey,this.sortOrder=this.sortOrder||1,this.itemObj.forEach((function(t){e.rowObj[t.key]=""}))},e.prototype.addNewItem=function(e){void 0===e&&(e={}),e[this.uniqKey]&&(this.newItem=e[this.uniqKey],this.confirmAdd.emit({item:e}))},e.prototype.filterDuplicates=function(e,t,n){void 0===n&&(n="");var o=[];return e.forEach((function(e){var n=e[t];n&&(Array.isArray(n)?o=m(o,n):o.push(n))})),Array.from(new Set(o)).map((function(e){var n={};return n[t]=e,n}))},e.prototype.emailValidation=function(e){void 0===e&&(e={});var t=this.itemObj.find((function(e){return e.email}));if(t&&t.key){var n=e[t.key];if(!/^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$/.test(n))return!1}return!0},e.prototype.dropdownValidation=function(e){return void 0===e&&(e={}),""!==e.profileName},e.prototype.editCancel=function(e){var t=this,n=e?e[this.uniqKey]:this.rowInx,o=this.editItems.indexOf(n),i=this.items.findIndex((function(e){return e[t.uniqKey]===n}));this.editItems.splice(o,1),this.items[i]=u({},this.clonedItems[n]),this.clonedItems[n]={}},e.prototype.updateItem=function(e){void 0===e&&(e={}),this.rowInx=e[this.uniqKey],this.confirmUpdate.emit(e)},e.prototype.checkEmptyFields=function(e){var t=Object.values(e).indexOf("");Object.keys(e)[t];return-1===t},e.prototype.removeRow=function(e){var t=this.addNewItems.findIndex((function(t){return t.tempId===e.tempId})),n=this.items.findIndex((function(t){return t.tempId===e.tempId}));this.addNewItems.splice(t,1),this.items.splice(n,1)},e.prototype.editRowItems=function(e){void 0===e&&(e={});var t=this.uniqKey;this.editItems.push(e[t]);var n=this.items.find((function(n){return n[t]===e[t]}));this.clonedItems[e[t]]=u({},n)},e.prototype.deleteItem=function(e){this.confirmDelete.emit(e)},e.prototype.getNextGroupId=function(){var e=this,t=0;return this.items.forEach((function(n){isNaN(n[e.uniqKey])||t<n[e.uniqKey]&&(t=n[e.uniqKey])})),+t+1},e.prototype.addNew=function(){var e=u({},this.rowObj);e.tempId=this.items.length+1,this.autoGenerateId&&(e[this.uniqKey]=this.getNextGroupId()),this.keyOptional&&(e[this.uniqKey]=e.tempId),this.addNewItems.unshift(e),this.items.unshift(e)},e.prototype.selectValue=function(){this.selectedValueEmit.emit(this.radioSelectedValue)},e.prototype.selectInfo=function(e,t){var n=u({},t,e);this.selectInfoEmit.emit(n)},e.prototype.selectLink=function(e,t){void 0===e&&(e={}),void 0===t&&(t={}),t&&t.stopPropagation(),this.selectedLinkEmit.emit(e)},e.prototype.saveItems=function(){this.saveChoosenValues.emit(this.choosenItems)},e.prototype.cancelCheck=function(){this.closeDialog.emit(!0)},e.decorators=[{type:t.Component,args:[{selector:"ngx-custom-data-table",template:'\n    <div class="p-col-12 margin-top-24" *ngIf="!noActions && !onlyDelete">\n    <button class="button-primary" pButton type="button" label="+ Add"\n        (click)="addNew()"></button>\n</div>\n<p-table #itemTable [sortField]="sortKey" [sortOrder]="sortOrder" [selectionMode]="enableSelection ? \'single\' : \'\'"\n    [(selection)]="choosenItems" [rowHover]="true" [value]="items" [scrollable]="true" scrollHeight="300px"\n    class="items-table" *ngIf="items?.length > 0;else noDataAv"\n    (onRowSelect)="radioSelectedValue = $event;selectValue()" (onRowUnselect)="radioSelectedValue=\'\';selectValue()">\n    <ng-template pTemplate="header">\n        <tr>\n            <th *ngIf="showCheckBox" style="width: 3em"></th>\n            <th *ngIf="!noActions">Actions</th>\n            <ng-container *ngFor="let obj of itemObj">\n                <th *ngIf="!obj.hide && obj.type !== \'dropdown\'" [pSortableColumn]="obj.key"\n                    [style.width]="obj.width + \'em\'">\n                    {{obj.value}} <p-sortIcon [field]="obj.key"></p-sortIcon>\n                </th>\n                <th *ngIf="obj.type === \'dropdown\'" [innerHTML]="obj.value"></th>\n            </ng-container>\n        </tr>\n        <tr>\n            <th *ngIf="showCheckBox" style="width: 3em">\n                <p-tableHeaderCheckbox *ngIf="!hideHeaderCheckBox"></p-tableHeaderCheckbox>\n            </th>\n            <th *ngIf="!noActions"></th>\n            <ng-container *ngFor="let obj of itemObj">\n                <th *ngIf="!obj.hide && !noHeaderDropdown" [style.width]="obj.width + \'em\'">\n                    <p-dropdown *ngIf="obj.type!==\'multi-select\'" appendTo="body" [filter]="true"\n                        (onChange)="itemTable.filter($event.value ? $event.value[obj.key] : \'\', obj?.key, \'contains\')"\n                        [options]="filterDuplicates(items,obj.key, obj.keySet)"\n                        placeholder="{{\'Search By \' + obj.value}}"\n                        [optionLabel]="obj.key" [showClear]="true">\n                    </p-dropdown>\n                </th>\n            </ng-container>\n        </tr>\n    </ng-template>\n    <ng-template pTemplate="body" let-item let-rowIndex="rowIndex">\n        <tr class="text-center" [pSelectableRow]="item" [pSelectableRowDisabled]="item?.disableCheckbox" *ngIf="item">\n            <ng-container *ngIf="!item?.tempId;else newInput">\n                <ng-container *ngIf="editItems.indexOf(item[uniqKey]) === -1;else showInput">\n                    <td *ngIf="!noActions">\n                        <p-radioButton class="radio-button" *ngIf="showRadioInRows" name="groupname" [value]="item"\n                            [(ngModel)]="radioSelectedValue" (onClick)="selectValue()"></p-radioButton>\n                        <button\n                            *ngIf="!onlyDelete"\n                            pButton type="button" icon="pi pi-pencil" class="ui-button-info"\n                            (click)="editRowItems(item)"></button>\n                        <button pButton\n                            type="button" icon="pi pi-trash" class="ui-button-danger"\n                            (click)="deleteItem(item[uniqKey])"></button>\n                    </td>\n                    <td *ngIf="showCheckBox" style="width: 3em">\n                        <p-tableCheckbox [escape]="false" [pTooltip]="item?.tooltipMsg" [value]="item"\n                            [disabled]="item?.disableCheckbox">\n                        </p-tableCheckbox>\n                    </td>\n                    <ng-container *ngFor="let obj of itemObj">\n                        <ng-container *ngIf="!obj.hide">\n                            <td *ngIf="obj.keySet;else noSet" [style.width]="obj.width + \'em\'">\n                                <div *ngFor="let set of item[obj?.key];let setInx = index;" class="set-content">\n                                    <span title="{{set}}" class="ellipsis-content">\n                                        {{set}}\n                                    </span>\n                                    <i title="Assignee info" class="pi pi-info-circle"\n                                        (click)="selectInfo(item[obj?.keySet][setInx],item)"></i>\n                                </div>\n                            </td>\n                            <ng-template #noSet>\n                                <td [class.link]="obj.link" *ngIf="obj.type!==\'multi-select\' && obj.type!==\'dropdown\'"\n                                    (click)="obj?.action ? selectLink(item,$event) : \'\'"\n                                    [style.width]="obj.width + \'em\'">\n                                    {{obj?.date ? (item[obj?.key] | date: \'dd MMM yyyy, HH:mm\') : item[obj?.key]}}</td>\n                                <td *ngIf="obj.type===\'multi-select\'" [style.width]="obj.width + \'em\'">\n                                    <div *ngFor="let option of item[obj.key]">{{option.name}}</div>\n                                </td>\n                                <td *ngIf="obj.type === \'dropdown\'"\n                                    [class.changed]="item[obj.key + \',prevKeyVal\'] && item[obj.key + \',prevKeyVal\'] !== item[obj.key]"\n                                    [style.width]="obj.width + \'em\'">\n                                    <p-dropdown (onChange)="item[obj.key] = $event?.originalEvent?.target?.innerText"\n                                        [options]="profilesList" *ngIf="obj.type===\'dropdown\'"\n                                        placeholder="{{item[obj.key]}}" [ngModel]="item[obj.key]"\n                                        id="{{obj.key + \'\' + rowIndex}}" required="true" [autoWidth]="false"\n                                        appendTo="body">\n                                    </p-dropdown>\n                                </td>\n                            </ng-template>\n                        </ng-container>\n                    </ng-container>\n                </ng-container>\n            </ng-container>\n            <ng-template #newInput>\n                <td>\n                    <button pButton type="button" icon="pi pi-check" class="ui-button-success"\n                        (click)="addNewItem(item)"></button>\n                    <button pButton type="button" icon="pi pi-times" class="ui-button-danger"\n                        (click)="removeRow(item)"></button>\n                </td>\n                <ng-container *ngFor="let obj of itemObj;let index = index">\n                    <ng-container *ngIf="!obj.hide">\n                        <td *ngIf="obj.type!==\'multi-select\'" [style.width]="obj.width + \'em\'">\n                            <div *ngIf="autoGenerateId && obj.key === uniqKey;else notAutoGenerTemp">{{item[uniqKey]}}\n                            </div>\n                            <ng-template #notAutoGenerTemp>\n                                <input (keyup.enter)="addNewItem(item)" *ngIf="obj.type!=\'drop-down\'" type="text"\n                                    id="{{obj.key + \'\' + index}}" pInputText [(ngModel)]="item[obj.key]"\n                                    placeholder="{{\'Please Enter \' + obj.value}}">\n                                <p-dropdown [options]="obj.values || profilesList" *ngIf="obj.type===\'drop-down\'"\n                                    id="{{obj.key + \'\' + rowIndex}}"\n                                    placeholder="{{\'Please Enter \' + obj.value}}"\n                                    required="true" [(ngModel)]="item[obj.key]"\n                                    [optionLabel]="obj.values?.length > 0 ? \'label\' : \'profileName\'" [autoWidth]="false"\n                                    appendTo="body">\n                                </p-dropdown>\n                            </ng-template>\n                        </td>\n                        <td *ngIf="obj.type===\'multi-select\'" [style.width]="obj.width + \'em\'">\n                            <p-multiSelect filter="true" multiple="true" appendTo="body" checkbox="true"\n                                [options]="obj.values"\n                                [(ngModel)]="item[obj.key]" optionLabel="name">\n                            </p-multiSelect>\n                        </td>\n                    </ng-container>\n                </ng-container>\n            </ng-template>\n            <ng-template #showInput>\n                <td>\n                    <button pButton type="button" icon="pi pi-check" class="ui-button-success"\n                        (click)="updateItem(item)"></button>\n                    <button pButton type="button" icon="pi pi-times" class="ui-button-danger"\n                        (click)="editCancel(item)"></button>\n                </td>\n                <ng-container *ngFor="let obj of itemObj;let first = first">\n                    <ng-container *ngIf="!obj.hide">\n                        <td *ngIf="uniqKey === obj?.key" [style.width]="obj.width + \'em\'">{{item[obj?.key]}}</td>\n                        <td *ngIf="uniqKey !== obj?.key && obj.type!==\'multi-select\'" [style.width]="obj.width + \'em\'">\n                            <input (keyup.enter)="updateItem(item)" *ngIf="obj.type!=\'drop-down\'" type="text"\n                                id="{{obj.key + \'\' + rowIndex}}" pInputText\n                                placeholder="{{\'Please Enter \' + obj.value}}"\n                                [(ngModel)]="item[obj.key]">\n                            <p-dropdown [options]="obj.values || profilesList" *ngIf="obj.type===\'drop-down\'"\n                                placeholder="{{item[obj.key]}}" id="{{obj.key + \'\' + rowIndex}}"\n                                [(ngModel)]="item[obj.key]" required="true"\n                                [optionLabel]="obj.values?.length > 0 ? \'label\' : \'profileName\'" [autoWidth]="false"\n                                appendTo="body">\n                            </p-dropdown>\n                        </td>\n                        <td *ngIf="obj.type===\'multi-select\'" [style.width]="obj.width + \'em\'">\n                            <p-multiSelect filter="true" multiple="true" appendTo="body" checkbox="true"\n                                [options]="obj.values" [(ngModel)]="item[obj.key]" optionLabel="name">\n                            </p-multiSelect>\n                        </td>\n                    </ng-container>\n                </ng-container>\n            </ng-template>\n        </tr>\n    </ng-template>\n</p-table>\n<div class="p-col-12" [ngClass]="{\'text-right\': btnContents?.length > 1, \'text-center\': btnContents?.length === 1}"\n    *ngIf="btnContents?.length > 0">\n    <ng-container *ngFor="let btn of btnContents">\n        <button class="button-{{btn.styleClass}} btn-{{btn.width}}" pButton type="button"\n            label="{{btn.btnName}}" (click)="btn.cancel ? cancelCheck() : saveItems()"></button>\n    </ng-container>\n</div>\n<ng-template #noDataAv>\n    <div class="text-center no-data-content">\n        No Data available\n    </div>\n</ng-template>\n  ',styles:["\n    .radio-button {\n      margin-right: 10px;\n    }\n    .link {\n        color: #116fbf;\n    }\n    .ui-state-highlight {\n        .link {\n            color: #fff;\n        }\n    }\n    .set-content {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        i {\n            font-size: 24px;\n            color: #ffcc33;\n        }\n    }\n    "]}]}],e.ctorParameters=function(){return[]},e.propDecorators={uniqKey:[{type:t.Input}],autoGenerateId:[{type:t.Input}],keyOptional:[{type:t.Input}],showRadioInRows:[{type:t.Input}],showCheckBox:[{type:t.Input}],noActions:[{type:t.Input}],enableSelection:[{type:t.Input}],onlyDelete:[{type:t.Input}],sortOrder:[{type:t.Input}],sortKey:[{type:t.Input}],hideHeaderCheckBox:[{type:t.Input}],btnContents:[{type:t.Input}],noHeaderDropdown:[{type:t.Input}],selectionChange:[{type:t.Input}],tableList:[{type:t.Input}],tableKeysList:[{type:t.Input}],tableProfileList:[{type:t.Input}],selectedValueEmit:[{type:t.Output}],confirmAdd:[{type:t.Output}],confirmUpdate:[{type:t.Output}],selectedLinkEmit:[{type:t.Output}],confirmDelete:[{type:t.Output}],closeDialog:[{type:t.Output}],saveChoosenValues:[{type:t.Output}],selectInfoEmit:[{type:t.Output}]},e}();var b=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{declarations:[h],imports:[n.RadioButtonModule,o.TableModule,p.TooltipModule,i.DropdownModule,r.CheckboxModule,s.MultiSelectModule,l.CommonModule,a.FormsModule,d.ButtonModule],exports:[h]}]}],e}();e.NgxCustomDataTableComponent=h,e.NgxCustomDataTableModule=b,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=ngx-custom-data-table.umd.min.js.map