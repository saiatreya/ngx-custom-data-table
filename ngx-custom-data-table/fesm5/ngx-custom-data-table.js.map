{"version":3,"file":"ngx-custom-data-table.js","sources":["ng://ngx-custom-data-table/lib/ngx-custom-data-table.component.ts","ng://ngx-custom-data-table/lib/ngx-custom-data-table.module.ts"],"sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  // tslint:disable-next-line: component-selector\n  selector: 'ngx-custom-data-table',\n  template: `\n    <div class=\"p-col-12 margin-top-24\" *ngIf=\"!noActions && !onlyDelete\">\n    <button class=\"button-primary\" pButton type=\"button\" label=\"+ Add\"\n        (click)=\"addNew()\"></button>\n</div>\n<p-table #itemTable [sortField]=\"sortKey\" [sortOrder]=\"sortOrder\" [selectionMode]=\"enableSelection ? 'single' : ''\"\n    [(selection)]=\"choosenItems\" [rowHover]=\"true\" [value]=\"items\" [scrollable]=\"true\" scrollHeight=\"300px\"\n    class=\"items-table\" *ngIf=\"items?.length > 0;else noDataAv\"\n    (onRowSelect)=\"radioSelectedValue = $event;selectValue()\" (onRowUnselect)=\"radioSelectedValue='';selectValue()\">\n    <ng-template pTemplate=\"header\">\n        <tr>\n            <th *ngIf=\"showCheckBox\" style=\"width: 3em\"></th>\n            <th *ngIf=\"!noActions\">Actions</th>\n            <ng-container *ngFor=\"let obj of itemObj\">\n                <th *ngIf=\"!obj.hide && obj.type !== 'dropdown'\" [pSortableColumn]=\"obj.key\"\n                    [style.width]=\"obj.width + 'em'\">\n                    {{obj.value}} <p-sortIcon [field]=\"obj.key\"></p-sortIcon>\n                </th>\n                <th *ngIf=\"obj.type === 'dropdown'\" [innerHTML]=\"obj.value\"></th>\n            </ng-container>\n        </tr>\n        <tr>\n            <th *ngIf=\"showCheckBox\" style=\"width: 3em\">\n                <p-tableHeaderCheckbox *ngIf=\"!hideHeaderCheckBox\"></p-tableHeaderCheckbox>\n            </th>\n            <th *ngIf=\"!noActions\"></th>\n            <ng-container *ngFor=\"let obj of itemObj\">\n                <th *ngIf=\"!obj.hide && !noHeaderDropdown\" [style.width]=\"obj.width + 'em'\">\n                    <p-dropdown *ngIf=\"obj.type!=='multi-select'\" appendTo=\"body\" [filter]=\"true\"\n                        (onChange)=\"itemTable.filter($event.value ? $event.value[obj.key] : '', obj?.key, 'contains')\"\n                        [options]=\"filterDuplicates(items,obj.key, obj.keySet)\"\n                        placeholder=\"{{'Search By ' + obj.value}}\"\n                        [optionLabel]=\"obj.key\" [showClear]=\"true\">\n                    </p-dropdown>\n                </th>\n            </ng-container>\n        </tr>\n    </ng-template>\n    <ng-template pTemplate=\"body\" let-item let-rowIndex=\"rowIndex\">\n        <tr class=\"text-center\" [pSelectableRow]=\"item\" [pSelectableRowDisabled]=\"item?.disableCheckbox\" *ngIf=\"item\">\n            <ng-container *ngIf=\"!item?.tempId;else newInput\">\n                <ng-container *ngIf=\"editItems.indexOf(item[uniqKey]) === -1;else showInput\">\n                    <td *ngIf=\"!noActions\">\n                        <p-radioButton class=\"radio-button\" *ngIf=\"showRadioInRows\" name=\"groupname\" [value]=\"item\"\n                            [(ngModel)]=\"radioSelectedValue\" (onClick)=\"selectValue()\"></p-radioButton>\n                        <button\n                            *ngIf=\"!onlyDelete\"\n                            pButton type=\"button\" icon=\"pi pi-pencil\" class=\"ui-button-info\"\n                            (click)=\"editRowItems(item)\"></button>\n                        <button pButton\n                            type=\"button\" icon=\"pi pi-trash\" class=\"ui-button-danger\"\n                            (click)=\"deleteItem(item[uniqKey])\"></button>\n                    </td>\n                    <td *ngIf=\"showCheckBox\" style=\"width: 3em\">\n                        <p-tableCheckbox [escape]=\"false\" [pTooltip]=\"item?.tooltipMsg\" [value]=\"item\"\n                            [disabled]=\"item?.disableCheckbox\">\n                        </p-tableCheckbox>\n                    </td>\n                    <ng-container *ngFor=\"let obj of itemObj\">\n                        <ng-container *ngIf=\"!obj.hide\">\n                            <td *ngIf=\"obj.keySet;else noSet\" [style.width]=\"obj.width + 'em'\">\n                                <div *ngFor=\"let set of item[obj?.key];let setInx = index;\" class=\"set-content\">\n                                    <span title=\"{{set}}\" class=\"ellipsis-content\">\n                                        {{set}}\n                                    </span>\n                                    <i title=\"Assignee info\" class=\"pi pi-info-circle\"\n                                        (click)=\"selectInfo(item[obj?.keySet][setInx],item)\"></i>\n                                </div>\n                            </td>\n                            <ng-template #noSet>\n                                <td [class.link]=\"obj.link\" *ngIf=\"obj.type!=='multi-select' && obj.type!=='dropdown'\"\n                                    (click)=\"obj?.action ? selectLink(item,$event) : ''\"\n                                    [style.width]=\"obj.width + 'em'\">\n                                    {{obj?.date ? (item[obj?.key] | date: 'dd MMM yyyy, HH:mm') : item[obj?.key]}}</td>\n                                <td *ngIf=\"obj.type==='multi-select'\" [style.width]=\"obj.width + 'em'\">\n                                    <div *ngFor=\"let option of item[obj.key]\">{{option.name}}</div>\n                                </td>\n                                <td *ngIf=\"obj.type === 'dropdown'\"\n                                    [class.changed]=\"item[obj.key + ',prevKeyVal'] && item[obj.key + ',prevKeyVal'] !== item[obj.key]\"\n                                    [style.width]=\"obj.width + 'em'\">\n                                    <p-dropdown (onChange)=\"item[obj.key] = $event?.originalEvent?.target?.innerText\"\n                                        [options]=\"profilesList\" *ngIf=\"obj.type==='dropdown'\"\n                                        placeholder=\"{{item[obj.key]}}\" [ngModel]=\"item[obj.key]\"\n                                        id=\"{{obj.key + '' + rowIndex}}\" required=\"true\" [autoWidth]=\"false\"\n                                        appendTo=\"body\">\n                                    </p-dropdown>\n                                </td>\n                            </ng-template>\n                        </ng-container>\n                    </ng-container>\n                </ng-container>\n            </ng-container>\n            <ng-template #newInput>\n                <td>\n                    <button pButton type=\"button\" icon=\"pi pi-check\" class=\"ui-button-success\"\n                        (click)=\"addNewItem(item)\"></button>\n                    <button pButton type=\"button\" icon=\"pi pi-times\" class=\"ui-button-danger\"\n                        (click)=\"removeRow(item)\"></button>\n                </td>\n                <ng-container *ngFor=\"let obj of itemObj;let index = index\">\n                    <ng-container *ngIf=\"!obj.hide\">\n                        <td *ngIf=\"obj.type!=='multi-select'\" [style.width]=\"obj.width + 'em'\">\n                            <div *ngIf=\"autoGenerateId && obj.key === uniqKey;else notAutoGenerTemp\">{{item[uniqKey]}}\n                            </div>\n                            <ng-template #notAutoGenerTemp>\n                                <input (keyup.enter)=\"addNewItem(item)\" *ngIf=\"obj.type!='drop-down'\" type=\"text\"\n                                    id=\"{{obj.key + '' + index}}\" pInputText [(ngModel)]=\"item[obj.key]\"\n                                    placeholder=\"{{'Please Enter ' + obj.value}}\">\n                                <p-dropdown [options]=\"obj.values || profilesList\" *ngIf=\"obj.type==='drop-down'\"\n                                    id=\"{{obj.key + '' + rowIndex}}\"\n                                    placeholder=\"{{'Please Enter ' + obj.value}}\"\n                                    required=\"true\" [(ngModel)]=\"item[obj.key]\"\n                                    [optionLabel]=\"obj.values?.length > 0 ? 'label' : 'profileName'\" [autoWidth]=\"false\"\n                                    appendTo=\"body\">\n                                </p-dropdown>\n                            </ng-template>\n                        </td>\n                        <td *ngIf=\"obj.type==='multi-select'\" [style.width]=\"obj.width + 'em'\">\n                            <p-multiSelect filter=\"true\" multiple=\"true\" appendTo=\"body\" checkbox=\"true\"\n                                [options]=\"obj.values\"\n                                [(ngModel)]=\"item[obj.key]\" optionLabel=\"name\">\n                            </p-multiSelect>\n                        </td>\n                    </ng-container>\n                </ng-container>\n            </ng-template>\n            <ng-template #showInput>\n                <td>\n                    <button pButton type=\"button\" icon=\"pi pi-check\" class=\"ui-button-success\"\n                        (click)=\"updateItem(item)\"></button>\n                    <button pButton type=\"button\" icon=\"pi pi-times\" class=\"ui-button-danger\"\n                        (click)=\"editCancel(item)\"></button>\n                </td>\n                <ng-container *ngFor=\"let obj of itemObj;let first = first\">\n                    <ng-container *ngIf=\"!obj.hide\">\n                        <td *ngIf=\"uniqKey === obj?.key\" [style.width]=\"obj.width + 'em'\">{{item[obj?.key]}}</td>\n                        <td *ngIf=\"uniqKey !== obj?.key && obj.type!=='multi-select'\" [style.width]=\"obj.width + 'em'\">\n                            <input (keyup.enter)=\"updateItem(item)\" *ngIf=\"obj.type!='drop-down'\" type=\"text\"\n                                id=\"{{obj.key + '' + rowIndex}}\" pInputText\n                                placeholder=\"{{'Please Enter ' + obj.value}}\"\n                                [(ngModel)]=\"item[obj.key]\">\n                            <p-dropdown [options]=\"obj.values || profilesList\" *ngIf=\"obj.type==='drop-down'\"\n                                placeholder=\"{{item[obj.key]}}\" id=\"{{obj.key + '' + rowIndex}}\"\n                                [(ngModel)]=\"item[obj.key]\" required=\"true\"\n                                [optionLabel]=\"obj.values?.length > 0 ? 'label' : 'profileName'\" [autoWidth]=\"false\"\n                                appendTo=\"body\">\n                            </p-dropdown>\n                        </td>\n                        <td *ngIf=\"obj.type==='multi-select'\" [style.width]=\"obj.width + 'em'\">\n                            <p-multiSelect filter=\"true\" multiple=\"true\" appendTo=\"body\" checkbox=\"true\"\n                                [options]=\"obj.values\" [(ngModel)]=\"item[obj.key]\" optionLabel=\"name\">\n                            </p-multiSelect>\n                        </td>\n                    </ng-container>\n                </ng-container>\n            </ng-template>\n        </tr>\n    </ng-template>\n</p-table>\n<div class=\"p-col-12\" [ngClass]=\"{'text-right': btnContents?.length > 1, 'text-center': btnContents?.length === 1}\"\n    *ngIf=\"btnContents?.length > 0\">\n    <ng-container *ngFor=\"let btn of btnContents\">\n        <button class=\"button-{{btn.styleClass}} btn-{{btn.width}}\" pButton type=\"button\"\n            label=\"{{btn.btnName}}\" (click)=\"btn.cancel ? cancelCheck() : saveItems()\"></button>\n    </ng-container>\n</div>\n<ng-template #noDataAv>\n    <div class=\"text-center no-data-content\">\n        No Data available\n    </div>\n</ng-template>\n  `,\n  styles: [\n    `\n    .radio-button {\n      margin-right: 10px;\n    }\n    .link {\n        color: #116fbf;\n    }\n    .ui-state-highlight {\n        .link {\n            color: #fff;\n        }\n    }\n    .set-content {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        i {\n            font-size: 24px;\n            color: #ffcc33;\n        }\n    }\n    `\n  ]\n})\nexport class NgxCustomDataTableComponent implements OnInit {\n\n  public radioSelectedValue = '';\n  public menus: any;\n  @Input() public uniqKey = '';\n  @Input() public autoGenerateId = false;\n  @Input() public keyOptional = false;\n  @Input() public showRadioInRows = false;\n  @Input() public showCheckBox = false;\n  @Input() public noActions = false;\n  @Input() public enableSelection = false;\n  @Input() public onlyDelete = false;\n  @Input() public sortOrder = 1;\n  @Input() public sortKey: string = this.uniqKey;\n  @Input() public hideHeaderCheckBox = false;\n  @Input() public btnContents: any = {};\n  @Input() public noHeaderDropdown = false;\n  @Input() set selectionChange(val: any) {\n    this.items = [...this.items.filter(x => x[this.uniqKey])];\n    this.addNewItems = [];\n    this.editCancel();\n  }\n  @Input() set tableList(val: any) {\n    if (this.rowInx) {\n      this.editCancel();\n      this.rowInx = '';\n    }\n    if (this.newItem) {\n      const newInx = this.addNewItems.findIndex(x => x[this.uniqKey] === this.newItem);\n      const itemInx = this.items.findIndex(x => x[this.uniqKey] === this.newItem);\n      delete this.items[itemInx].tempId;\n      this.addNewItems.splice(newInx, 1);\n      this.newItem = '';\n    }\n    if (val) {\n      this.items = [...this.addNewItems, ...val];\n      this.choosenItems = this.items.filter(x => x.chosen);\n    }\n  }\n  @Input() set tableKeysList(val: any) {\n    this.itemObj = val;\n  }\n\n  @Input() set tableProfileList(val: any) {\n    this.profilesList = val;\n  }\n  @Output() public selectedValueEmit: EventEmitter<any> = new EventEmitter<any>();\n  @Output() public confirmAdd: EventEmitter<any> = new EventEmitter<any>();\n  @Output() public confirmUpdate: EventEmitter<any> = new EventEmitter<any>();\n  @Output() public selectedLinkEmit: EventEmitter<any> = new EventEmitter<any>();\n  @Output() public confirmDelete: EventEmitter<any> = new EventEmitter<any>();\n  @Output() public closeDialog: EventEmitter<any> = new EventEmitter<any>();\n  @Output() public saveChoosenValues: EventEmitter<any> = new EventEmitter<any>();\n  @Output() public selectInfoEmit: EventEmitter<any> = new EventEmitter<any>();\n\n  public rowObj = {};\n  public editItems: any = [];\n  public clonedItems: any = {};\n  public items: any = [];\n  public itemObj: any = [];\n  public rowInx = '';\n  public addNewItems: any = [];\n  public newItem = '';\n  public choosenItems: any[] = [];\n  public processes: any;\n  public profilesList: any = [];\n  constructor() { }\n\n  ngOnInit() {\n    this.sortKey = this.sortKey || this.uniqKey;\n    this.sortOrder = this.sortOrder || 1;\n    this.itemObj.forEach(x => {\n      this.rowObj[x.key] = '';\n    });\n  }\n\n  addNewItem(item: any = {}) {\n    if (!item[this.uniqKey]) {\n      return;\n    }\n    /* const checkAllFields = this.checkEmptyFields(item);\n    if (!checkAllFields) {\n      return;\n    } */\n    this.newItem = item[this.uniqKey];\n    /* const validProfile = this.dropdownValidation(item);\n    const validEmail = this.emailValidation(item);\n    if (!validEmail || !validProfile) {\n      return;\n    } */\n    this.confirmAdd.emit({ item });\n  }\n\n  filterDuplicates(item, key, keySet: string = '') {\n    let noDuplicates = [];\n    item.forEach(x => {\n      const value = x[key];\n      if (value) {\n        if (Array.isArray(value)) {\n          noDuplicates = [...noDuplicates, ...value];\n        } else {\n          noDuplicates.push(value);\n        }\n      }\n    });\n    const filteredDuplicates = Array.from(new Set(noDuplicates));\n    const filteredData = filteredDuplicates.map(x => {\n      const obj = {};\n      obj[key] = x;\n      return obj;\n    });\n    return filteredData;\n  }\n\n  emailValidation(item: any = {}): boolean {\n    const isEmail = this.itemObj.find(x => x.email);\n    if (isEmail && isEmail['key']) {\n      const emailVal = item[isEmail['key']];\n      const emailPattern = /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/;\n      if (!emailPattern.test(emailVal)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  dropdownValidation(item: any = {}): boolean {\n    const isProfil = item['profileName'];\n    if (isProfil === '') {\n      return false;\n    }\n    return true;\n  }\n  editCancel(uniqKey?: string) {\n    const key = uniqKey ? uniqKey[this.uniqKey] : this.rowInx;\n    const rowToCancel = this.editItems.indexOf(key);\n    const index = this.items.findIndex(x => x[this.uniqKey] === key);\n    this.editItems.splice(rowToCancel, 1);\n    this.items[index] = { ...this.clonedItems[key] };\n    this.clonedItems[key] = {};\n  }\n\n  updateItem(item: any = {}) {\n    this.rowInx = item[this.uniqKey];\n    /* const checkAllFields = this.checkEmptyFields(item);\n    if (!checkAllFields) {\n      return;\n    }\n    const validProfile = this.dropdownValidation(item);\n    const validEmail = this.emailValidation(item);\n    if (!validEmail || !validProfile) {\n      return;\n    } */\n    this.confirmUpdate.emit(item);\n  }\n\n  checkEmptyFields(item: any) {\n    const values = Object.values(item);\n    const checkEmpty = values.indexOf('');\n    const key = Object.keys(item)[checkEmpty];\n    if (checkEmpty !== -1) {\n      return false;\n    }\n    return true;\n  }\n\n  removeRow(item) {\n    const newInx = this.addNewItems.findIndex(x => x.tempId === item.tempId);\n    const itemInx = this.items.findIndex(x => x.tempId === item.tempId);\n    this.addNewItems.splice(newInx, 1);\n    this.items.splice(itemInx, 1);\n  }\n\n  editRowItems(item: any = {}) {\n    const uniqKey = this.uniqKey;\n    this.editItems.push(item[uniqKey]);\n    const cloned = this.items.find(x => x[uniqKey] === item[uniqKey]);\n    this.clonedItems[item[uniqKey]] = { ...cloned };\n  }\n\n  deleteItem(id: string) {\n    this.confirmDelete.emit(id);\n  }\n\n  getNextGroupId() {\n    let maxGroupId = 0;\n    let nextGroupId = 0;\n    this.items.forEach(x => {\n      if (!isNaN(x[this.uniqKey])) {\n        if (maxGroupId < x[this.uniqKey]) {\n          maxGroupId = x[this.uniqKey];\n        }\n      }\n    });\n    nextGroupId = +maxGroupId + 1;\n    return nextGroupId;\n  }\n\n  addNew() {\n    const obj: any = { ...this.rowObj };\n    obj.tempId = this.items.length + 1;\n    if (this.autoGenerateId) {\n      obj[this.uniqKey] = this.getNextGroupId();\n    }\n    if (this.keyOptional) {\n      obj[this.uniqKey] = obj.tempId;\n    }\n    this.addNewItems.unshift(obj);\n    this.items.unshift(obj);\n  }\n\n  selectValue() {\n    this.selectedValueEmit.emit(this.radioSelectedValue);\n  }\n\n  selectInfo(set: any, item: any) {\n    const selectedItem = { ...item, ...set };\n    this.selectInfoEmit.emit(selectedItem);\n  }\n\n  selectLink(selectedItem: any = {}, $event: any = {}) {\n    if ($event) {\n      $event.stopPropagation();\n    }\n    this.selectedLinkEmit.emit(selectedItem);\n  }\n\n  saveItems() {\n    this.saveChoosenValues.emit(this.choosenItems);\n  }\n\n  cancelCheck() {\n    this.closeDialog.emit(true);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxCustomDataTableComponent } from './ngx-custom-data-table.component';\nimport { RadioButtonModule } from 'primeng/radiobutton';\nimport { TableModule } from 'primeng/table';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { CheckboxModule } from 'primeng/checkbox';\nimport { MultiSelectModule } from 'primeng/multiselect';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { TooltipModule } from 'primeng/tooltip';\nimport { ButtonModule } from 'primeng/button';\n\n@NgModule({\n  declarations: [NgxCustomDataTableComponent],\n  imports: [\n    RadioButtonModule,\n    TableModule,\n    TooltipModule,\n    DropdownModule,\n    CheckboxModule,\n    MultiSelectModule,\n    CommonModule,\n    FormsModule,\n    ButtonModule\n  ],\n  exports: [NgxCustomDataTableComponent]\n})\nexport class NgxCustomDataTableModule { }\n"],"names":[],"mappings":"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"}